<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <!--上下文名称-->
    <contextName>demo-pay-api</contextName>

    <!--自定义属性，这里用于存放日志目录
    来定义变量值的标签， 有两个属性，name和value；
    其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。
    定义变量后，可以使“${}”来使用变量。-->
    <property name="log.path" value="E:/log/demo-api" />

    <!--输出到控制台
    <appender>用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，
    常用就是控制台输出策略和文件输出策略。

    <encoder>表示对日志进行编码
    %d{HH: mm:ss.SSS}——日志输出时间
    %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
    %-5level——日志级别，并且使用5个字符靠左对齐
    %logger{36}——日志输出者的名字
    %msg——日志消息
    %n——平台的换行符
    -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--info信息输出到文件-->
    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>

        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${log.path}/info/logo-info.log</File>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <fileNamePattern>${log.path}/info/logo-info-%d{yyyyMMdd}.log</fileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--error信息输出到文件-->
    <appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <File>${log.path}/error/logo-error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/error/logo-error-%d{yyyyMMdd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--root节点是必选节点，用来指定最基础的日志输出级别,默认是DEBUG
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
    可以包含零个或多个元素，标识这个appender将会添加到这个loger
    -->
    <root level="info">
        <appender-ref ref="console" />
        <appender-ref ref="infoFile" />
        <appender-ref ref="errorFile" />
    </root>

</configuration>